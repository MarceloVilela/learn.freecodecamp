[...document.querySelectorAll('.block.open a')].map((el, key)=>console.log(`> ${++key}-${el.getAttribute('href').split('/').pop()}.js`))

> 1-es6.js
> 2-explore-differences-between-the-var-and-let-keywords.js
> 3-compare-scopes-of-the-var-and-let-keywords.js
> 4-declare-a-read-only-variable-with-the-const-keyword.js
> 5-mutate-an-array-declared-with-const.js
> 6-prevent-object-mutation.js
> 7-use-arrow-functions-to-write-concise-anonymous-functions.js
> 8-write-arrow-functions-with-parameters.js
> 9-write-higher-order-arrow-functions.js
> 10-set-default-parameters-for-your-functions.js
> 11-use-the-rest-operator-with-function-parameters.js
> 12-use-the-spread-operator-to-evaluate-arrays-in-place.js
> 13-use-destructuring-assignment-to-assign-variables-from-objects.js
> 14-use-destructuring-assignment-to-assign-variables-from-nested-objects.js
> 15-use-destructuring-assignment-to-assign-variables-from-arrays.js
> 16-use-destructuring-assignment-with-the-rest-operator-to-reassign-array-elements.js
> 17-use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters.js
> 18-create-strings-using-template-literals.js
> 19-write-concise-object-literal-declarations-using-simple-fields.js
> 20-write-concise-declarative-functions-with-es6.js
> 21-use-class-syntax-to-define-a-constructor-function.js
> 22-use-getters-and-setters-to-control-access-to-an-object.js
> 23-understand-the-differences-between-import-and-require.js
> 24-use-export-to-reuse-a-code-block.js
> 25-use--to-import-everything-from-a-file.js
> 26-create-an-export-fallback-with-export-default.js
> 27-import-a-default-export.js
