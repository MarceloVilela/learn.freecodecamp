1
	The console.log()method, which "prints" the output of what's within its parentheses to the console, 
	will likely be the most helpful debugging tool.

2
	If you would like to see only your single output and not have to worry about running through the test cycles, you can use console.clear().

3
	You can use typeofto check the data structure, or type, of a variable.
	If you think you're adding two numbers, but one is actually a string, the results can be unexpected. 

	JavaScript recognizes six primitive (immutable) data types: 
	Boolean, Null, Undefined, Number, String, and Symbol(new with ES6) and one type for mutable items: Object. 
	Note that in JavaScript, arrays are technically a type of object.
	console.log(typeof []); // outputs "object"

4
	Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser 
	looking for an object that doesn't exist - and complain in the form of a reference error.

5
	Another syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair.

6
	JavaScript allows the use of both single ('') and double ("") quotes to declare a string.
	Just be careful that you don't close the string too early, which causes a syntax error.

7
	Branching programs, i.e. ones that do different things if certain conditions are met, 
	rely on if, else if, and elsestatements in JavaScript.

	As covered in previous challenges, the assignment operator (=) in JavaScript assigns a value to a variable name. 
	And the ==and ===operators check for equality (the triple ===tests for strict equality, meaning both value and type are the same).

8
	Often times the result of a function call is saved in a variable for other use in your code.

9
	the next bug to watch out for is when a function's arguments are supplied in the incorrect order.

	If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. 
	
	If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. 

10
	JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. 
	If you try to access an index equal to the length, the program may throw an "index out of range" reference error or print undefined.

11
	A potential issue is when variables either should be reinitialized, and aren't, or vice versa. 
	This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.

12
	It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. 
	
	One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. 
	
	Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.
